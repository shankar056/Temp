package com.example.demo.exception;

public class LeaveInitializationException extends RuntimeException {

    public LeaveInitializationException(String message) {
        super(message);
    }
}


package com.example.demo.exception;

public class LeaveTypeNotFound extends RuntimeException {

    public LeaveTypeNotFound(String message) {
        super(message);
    }
}


package com.example.demo.exception;

public class LeaveTypeNotFound extends RuntimeException {

    public LeaveTypeNotFound(String message) {
        super(message);
    }
}


package com.example.demo.exception;

public class ConflictException extends RuntimeException {

    public ConflictException(String message) {
        super(message);
    }
}

package com.example.demo.exception;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;

import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.Map;

@RestControllerAdvice
public class GlobalExceptionHandler {

    private static final String LEAVE_BALANCE_PATH = "/leavebalance";

    private Map<String, Object> createResponse(HttpStatus status, String error, String message, String path) {
        Map<String, Object> response = new HashMap<>();
        response.put("timestamp", LocalDateTime.now());
        response.put("status", status.value());
        response.put("error", error);
        response.put("message", message);
        response.put("path", path);
        return response;
    }

    @ExceptionHandler(MethodArgumentNotValidException.class)
    public ResponseEntity<Map<String, Object>> handleValidationExceptions(MethodArgumentNotValidException ex) {
        String errorMessage = ex.getBindingResult().getAllErrors().get(0).getDefaultMessage();
        return new ResponseEntity<>(createResponse(HttpStatus.BAD_REQUEST, "Validation Error", errorMessage, LEAVE_BALANCE_PATH), HttpStatus.BAD_REQUEST);
    }

    @ExceptionHandler(LeaveInitializationException.class)
    public ResponseEntity<Map<String, Object>> handleLeaveInitializationException(LeaveInitializationException ex) {
        return new ResponseEntity<>(createResponse(HttpStatus.BAD_REQUEST, "Leave Initialization Error", ex.getMessage(), LEAVE_BALANCE_PATH), HttpStatus.BAD_REQUEST);
    }

    @ExceptionHandler(LeaveTypeNotFound.class)
    public ResponseEntity<Map<String, Object>> handleLeaveTypeNotFound(LeaveTypeNotFound ex) {
        return new ResponseEntity<>(createResponse(HttpStatus.NOT_FOUND, "Leave Type Not Found", ex.getMessage(), LEAVE_BALANCE_PATH), HttpStatus.NOT_FOUND);
    }

    @ExceptionHandler(EmployeeNotFoundException.class)
    public ResponseEntity<Map<String, Object>> handleEmployeeNotFoundException(EmployeeNotFoundException ex) {
        return new ResponseEntity<>(createResponse(HttpStatus.NOT_FOUND, "Employee Not Found", ex.getMessage(), LEAVE_BALANCE_PATH), HttpStatus.NOT_FOUND);
    }

    @ExceptionHandler(InvalidLeaveBalanceException.class)
    public ResponseEntity<Map<String, Object>> handleInvalidLeaveBalanceException(InvalidLeaveBalanceException ex) {
        return new ResponseEntity<>(createResponse(HttpStatus.BAD_REQUEST, "Invalid Leave Balance", ex.getMessage(), LEAVE_BALANCE_PATH), HttpStatus.BAD_REQUEST);
    }

    @ExceptionHandler(ConflictException.class)
    public ResponseEntity<Map<String, Object>> handleConflictException(ConflictException ex) {
        return new ResponseEntity<>(createResponse(HttpStatus.CONFLICT, "Conflict", ex.getMessage(), LEAVE_BALANCE_PATH), HttpStatus.CONFLICT);
    }

    @ExceptionHandler(Exception.class)
    public ResponseEntity<Map<String, Object>> handleGeneric(Exception ex) {
        return new ResponseEntity<>(createResponse(HttpStatus.INTERNAL_SERVER_ERROR, "Internal Server Error", ex.getMessage(), LEAVE_BALANCE_PATH), HttpStatus.INTERNAL_SERVER_ERROR);
    }
}

package com.example.demo.service;

import com.example.demo.exception.EmployeeNotFoundException;
import com.example.demo.exception.InvalidLeaveBalanceException;
import com.example.demo.exception.LeaveInitializationException;
import com.example.demo.exception.LeaveTypeNotFound;
import com.example.demo.model.LeaveBalance;
import com.example.demo.repository.LeaveBalanceRepository;
import com.example.demo.util.LeaveTypes;
import lombok.RequiredArgsConstructor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@Service
@RequiredArgsConstructor
public class LeaveBalanceServiceImpl implements LeaveBalanceService {

    private static final Logger logger = LoggerFactory.getLogger(LeaveBalanceServiceImpl.class);

    private final LeaveBalanceRepository repo;

    @Override
    public void initializeLeaveBalance(int employeeId) {
        try {
            logger.info("Initializing leave balance for employee with ID: {}", employeeId);

            // Check if the employee already has leave balances initialized
            List<LeaveBalance> existingBalances = repo.findByEmployeeId(employeeId);
            if (!existingBalances.isEmpty()) {
                logger.warn("Leave balances have already been initialized for employee with ID: {}", employeeId);
                throw new LeaveInitializationException("Leave balances have already been initialized for employee with ID " + employeeId);
            }

            // Initialize leave balances
            LeaveTypes.leaves().forEach((leaveType, balance) -> {
                LeaveBalance leaveBalance = new LeaveBalance(0, employeeId, leaveType, balance);
                repo.save(leaveBalance);
                logger.info("Leave balance for '{}' initialized to {}", leaveType, balance);
            });

            logger.info("Leave balances initialized successfully for employee with ID: {}", employeeId);

        } catch (Exception e) {
            logger.error("Error occurred while initializing leave balances for employee with ID: {}", employeeId, e);
            throw new LeaveInitializationException("Error occurred while initializing leave balances for employee with ID " + employeeId, e);
        }
    }

    @Override
    public List<LeaveBalance> getLeaveBalancesByEmployeeId(int employeeId) {
        logger.info("Retrieving leave balances for employee with ID: {}", employeeId);
        List<LeaveBalance> balances = repo.findByEmployeeId(employeeId);

        if (balances.isEmpty()) {
            logger.warn("No leave balances found for employee with ID: {}", employeeId);
            throw new EmployeeNotFoundException("No leave balances found for employee with ID " + employeeId);
        }

        logger.info("Successfully retrieved leave balances for employee with ID: {}", employeeId);
        return balances;
    }

    @Override
    public Optional<LeaveBalance> getBalanceByType(int employeeId, String leaveType) {
        logger.info("Retrieving '{}' leave balance for employee with ID: {}", leaveType, employeeId);
        Optional<LeaveBalance> balance = repo.findByEmployeeIdAndLeaveType(employeeId, leaveType);

        if (balance.isEmpty()) {
            logger.warn("Leave type '{}' not found for employee with ID: {}", leaveType, employeeId);
            throw new LeaveTypeNotFound("Leave type '" + leaveType + "' not found for employee with ID " + employeeId);
        }

        logger.info("Successfully retrieved '{}' leave balance for employee with ID: {}", leaveType, employeeId);
        return balance;
    }

    @Override
    public String updateLeaveBalance(LeaveBalance updatedBalance) throws LeaveTypeNotFound {
        logger.info("Updating leave balance for employee with ID: {} and leave type: {}", updatedBalance.getEmployeeId(), updatedBalance.getLeaveType());

        Optional<LeaveBalance> existingBalance = repo.findByEmployeeIdAndLeaveType(updatedBalance.getEmployeeId(), updatedBalance.getLeaveType());

        if (existingBalance.isPresent()) {
            LeaveBalance existing = existingBalance.get();

            // Validate the updated balance (e.g., balance cannot be negative)
            if (updatedBalance.getBalance() < 0) {
                logger.error("Invalid leave balance: {}. Leave balance cannot be negative for employee with ID: {}", updatedBalance.getBalance(), updatedBalance.getEmployeeId());
                throw new InvalidLeaveBalanceException("Leave balance cannot be negative.");
            }

            existing.setBalance(updatedBalance.getBalance());
            repo.save(existing);

            logger.info("Successfully updated leave balance for employee with ID: {} and leave type: {}", updatedBalance.getEmployeeId(), updatedBalance.getLeaveType());
            return "Leave balance updated successfully for employee ID " + updatedBalance.getEmployeeId();
        } else {
            logger.warn("Leave type '{}' not found for employee with ID: {}", updatedBalance.getLeaveType(), updatedBalance.getEmployeeId());
            throw new LeaveTypeNotFound("Leave type '" + updatedBalance.getLeaveType() + "' not found for employee with ID " + updatedBalance.getEmployeeId());
        }
    }
}
